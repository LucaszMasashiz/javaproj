/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.PlaylistController;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import manager.ManagerSession;
import model.Playlist;
import model.Usuario;
import view.VPlaylistMusica;

/**
 *
 * @author Masashi
 */
public class VPlaylist extends javax.swing.JFrame {
    protected int usuarioId;
    protected PlaylistController playlistController = new PlaylistController();
    Usuario usuarioAutenticado = null;
    /**
     * Creates new form Playlist
     */
    public VPlaylist() {
        initComponents();
        usuarioAutenticado = ManagerSession.getInstance().getCurrentUser();
        this.usuarioId = usuarioAutenticado.getId();
        atualizarTabelaPlaylists();
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaPlaylist = new javax.swing.JTable();
        criarPlaylist = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        criarPlaylistText = new javax.swing.JTextField();
        excluirPlaylist = new javax.swing.JButton();
        voltarHome = new javax.swing.JButton();
        entrarPlaylist = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        entrarPlaylistText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        jLabel4.setFont(new java.awt.Font("Perpetua Titling MT", 3, 36)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("spotifei");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Playlists");

        tabelaPlaylist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Playlists", "excluir", "ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaPlaylist.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tabelaPlaylistAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(tabelaPlaylist);

        criarPlaylist.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        criarPlaylist.setText("Criar Playlist");
        criarPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarPlaylistActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Criar playlist :");

        criarPlaylistText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarPlaylistTextActionPerformed(evt);
            }
        });

        excluirPlaylist.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        excluirPlaylist.setText("Excluir");
        excluirPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirPlaylistActionPerformed(evt);
            }
        });

        voltarHome.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        voltarHome.setText("Voltar");
        voltarHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarHomeActionPerformed(evt);
            }
        });

        entrarPlaylist.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        entrarPlaylist.setText("Entrar");
        entrarPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrarPlaylistActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Entrar na playlist :");

        entrarPlaylistText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrarPlaylistTextActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Perpetua Titling MT", 3, 36)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("spotifei");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(criarPlaylistText, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(criarPlaylist))
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(excluirPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(voltarHome, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(entrarPlaylistText, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(entrarPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 12, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(275, 275, 275)
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(voltarHome))
                            .addComponent(excluirPlaylist))
                        .addGap(161, 161, 161)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(criarPlaylistText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(criarPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(entrarPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(entrarPlaylistText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaPlaylistAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tabelaPlaylistAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_tabelaPlaylistAncestorAdded

    private void excluirPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirPlaylistActionPerformed
        int selectedRow = tabelaPlaylist.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Selecione uma playlist para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }
    int playlistId = (int) tabelaPlaylist.getValueAt(selectedRow, 2); 

    int confirm = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir a playlist?", "Confirmar exclusão", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        boolean sucesso = playlistController.deletarPlaylist(playlistId);
        if (sucesso) {
            atualizarTabelaPlaylists();
            JOptionPane.showMessageDialog(this, "Playlist excluída com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao excluir playlist.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_excluirPlaylistActionPerformed

    private void criarPlaylistTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarPlaylistTextActionPerformed
        String nomePlaylist = criarPlaylistText.getText().trim();
    if (!nomePlaylist.isEmpty()) {
        Playlist nova = playlistController.criarPlaylist(usuarioId, nomePlaylist);
        if (nova != null) {
            atualizarTabelaPlaylists();
            criarPlaylistText.setText("");
            JOptionPane.showMessageDialog(this, "Playlist criada com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao criar playlist.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Digite um nome para a playlist.", "Aviso", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_criarPlaylistTextActionPerformed

    private void criarPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarPlaylistActionPerformed
        String nomePlaylist = criarPlaylistText.getText().trim();
    if (!nomePlaylist.isEmpty()) {
        Playlist nova = playlistController.criarPlaylist(usuarioId, nomePlaylist);
        if (nova != null) {
            atualizarTabelaPlaylists();
            criarPlaylistText.setText("");
            JOptionPane.showMessageDialog(this, "Playlist criada com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao criar playlist.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Digite um nome para a playlist.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void atualizarTabelaPlaylists() {
        List<model.Playlist> playlists = playlistController.listarPorUsuario(usuarioId);
        DefaultTableModel model = (DefaultTableModel) tabelaPlaylist.getModel();
        model.setRowCount(0); 
        
        for (model.Playlist p : playlists) {
            model.addRow(new Object[]{p.getNome(), false, p.getId()});
        }
    }//GEN-LAST:event_criarPlaylistActionPerformed

    private void entrarPlaylistTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrarPlaylistTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entrarPlaylistTextActionPerformed

    private void entrarPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrarPlaylistActionPerformed
       
        String nomePlaylist = entrarPlaylistText.getText().trim();
        if (nomePlaylist.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Digite o nome da playlist para entrar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Playlist playlist = playlistController.buscarPorUsuarioIdENome(usuarioId, nomePlaylist);
        if (playlist != null) {
            VPlaylistMusica tela = new VPlaylistMusica(playlist.getId());
            tela.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Playlist não encontrada.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    

    }//GEN-LAST:event_entrarPlaylistActionPerformed

    private void voltarHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarHomeActionPerformed
        Home tela = new Home();
            tela.setLocationRelativeTo(null); 
            tela.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_voltarHomeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(model.Playlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(model.Playlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(model.Playlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(model.Playlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */ 
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new VPlaylist().setVisible(true);
        }
    });
          
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton criarPlaylist;
    private javax.swing.JTextField criarPlaylistText;
    private javax.swing.JButton entrarPlaylist;
    private javax.swing.JTextField entrarPlaylistText;
    private javax.swing.JButton excluirPlaylist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaPlaylist;
    private javax.swing.JButton voltarHome;
    // End of variables declaration//GEN-END:variables
}
